/*-
 * Copyright Â© 2009 Diamond Light Source Ltd.
 *
 * This file is part of GDA.
 *
 * GDA is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License version 3 as published by the Free
 * Software Foundation.
 *
 * GDA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along
 * with GDA. If not, see <http://www.gnu.org/licenses/>.
 */

package uk.ac.gda.richbeans.examples;

import java.net.URL;

import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.ScrolledComposite;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Label;

import uk.ac.gda.richbeans.components.scalebox.ScaleBox;
import uk.ac.gda.richbeans.components.wrappers.LabelWrapper;
import uk.ac.gda.richbeans.components.wrappers.TextWrapper;
import uk.ac.gda.richbeans.editors.DirtyContainer;
import uk.ac.gda.richbeans.editors.RichBeanEditorPart;

/**
 * @author fcp94556
 *
 */
public class ExampleEditorRichUI extends RichBeanEditorPart {

	private ScaleBox stop;
	private ScaleBox start;
	private TextWrapper edge;
	private TextWrapper element;
	/**
	 * @param path
	 * @param mappingURL
	 * @param dirtyContainer
	 * @param editingBean
	 */
	public ExampleEditorRichUI(String path, URL mappingURL, DirtyContainer dirtyContainer, Object editingBean) {
		super(path, mappingURL, dirtyContainer, editingBean);
	}

	@Override
	protected String getRichEditorTabText() {
		return "Example Parameters";
	}

	@SuppressWarnings("unused")
	@Override
	public void createPartControl(Composite parent) {
		final ScrolledComposite scrolledComposite = new ScrolledComposite(parent, SWT.H_SCROLL | SWT.V_SCROLL);
		scrolledComposite.setExpandHorizontal(true);
		scrolledComposite.setExpandVertical(true);

		// Automatic section generated by RCP Developer
		final Composite container = new Composite(scrolledComposite, SWT.NONE);
		final GridLayout gridLayout = new GridLayout();
		gridLayout.numColumns = 3;
		container.setLayout(gridLayout);
		container.setBounds(0, 0,739, 498);
		new Label(container, SWT.NONE);

		final Composite composite_1 = new Composite(container, SWT.NONE);
		composite_1.setLayout(new GridLayout());
		new Label(container, SWT.NONE);

		final Label elementLabel = new Label(container, SWT.NONE);
		elementLabel.setText("Element");
		new Label(container, SWT.NONE);

		element = new TextWrapper(container, SWT.BORDER);
		final GridData gd_element = new GridData(SWT.FILL, SWT.CENTER, true, false);
		element.setLayoutData(gd_element);

		final Label edgeLabel = new Label(container, SWT.NONE);
		edgeLabel.setText("Edge");
		new Label(container, SWT.NONE);

		edge = new TextWrapper(container, SWT.BORDER);
		final GridData gd_edge = new GridData(SWT.FILL, SWT.CENTER, true, false);
		edge.setLayoutData(gd_edge);

		final LabelWrapper startLabelWrapper = new LabelWrapper(container, SWT.NONE);
		startLabelWrapper.setText("Start");
		new Label(container, SWT.NONE);

		start = new ScaleBox(container, SWT.NONE);
		final GridData gd_start = new GridData(SWT.FILL, SWT.CENTER, false, false);
		start.setLayoutData(gd_start);

		final LabelWrapper stopLabelWrapper = new LabelWrapper(container, SWT.NONE);
		stopLabelWrapper.setText("Stop");
		new Label(container, SWT.NONE);

		stop = new ScaleBox(container, SWT.NONE);
		final GridData gd_stop = new GridData(SWT.FILL, SWT.CENTER, false, false);
		stop.setLayoutData(gd_stop);
		scrolledComposite.setContent(container);
	}

	@Override
	public void setFocus() {
		// TODO Auto-generated method stub

	}
	/**
	 * @return the element
	 */
	public TextWrapper getElement() {
		return element;
	}
	/**
	 * @return the edge
	 */
	public TextWrapper getEdge() {
		return edge;
	}
	/**
	 * @return the start
	 */
	public ScaleBox getStart() {
		return start;
	}
	/**
	 * @return the stop
	 */
	public ScaleBox getStop() {
		return stop;
	}

}

